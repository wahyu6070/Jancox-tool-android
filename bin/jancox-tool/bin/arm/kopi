####################################
#         Kopi Functions           #
####################################
#          By : wahyu6070          #
####################################
print(){
	echo "$1"
	}
	
printlog(){
	print "$1"
	if [ "$1" != " " ]; then
	print "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	print "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	else
	print "$1" >> $log
	print "$1" >> $loglive
	fi
	}
sedlog(){
	print "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $log
	print "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $loglive
	}
	
	
#
while_log(){
	print "$1" | tee -a $log
	}
listlog(){
	print " " >> $log
	print "▒▒▒▒▒▒▒▒▒▒▒▒▒ Folder List : $1 ▒▒▒▒▒▒▒▒▒▒▒▒▒" >> $log
	print " " >> $loglive
	print "▒▒▒▒▒▒▒▒▒▒▒▒▒ Folder List : $1 ▒▒▒▒▒▒▒▒▒▒▒▒▒" >> $loglive
	find "$1" -type f | while read lol; do
	while_log "▒ $(du -sah $lol | cut -f 1) ▒ $lol"
	done >> $loglive
	print "▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒" >> $log
	print " " >> $log
	print "▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒" >> $loglive
	print " " >> $loglive
	}

getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }

loadings() {
  PID=$!
  a=0;
  while [ -d /proc/$PID ]; do
    b=$((+1))
    a=$((a+1))
    sleep 0.9s
    printf "\r${@} [${a}Second]"
  done
}

loadingm() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((h+1))
    sleep 59.9s
    printf "\r${@} [${b}Minutes]"
  done
}

loadingz() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((a+1))
    sleep 0.9s
    printf "#"
  done
}

printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}



bash_color(){
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo "${G}example${N}"
}

abort(){
	print " " | tee -a $log | tee -a $loglive
	print "!!! $1" | tee -a $log | tee -a $loglive
	print " " | tee -a $log | tee -a $loglive
	exit 1
	}
	
#
del (){ rm -rf "$@"; }
cdir (){ mkdir -p "$@"; }


#jancox
rom-info (){
	editor2=$1
if [ -f $editor2/system/system/build.prop ]; then
system=system/system
systemroot=true
else
system=system
systemroot=false
fi;

test ! -f $editor2/$system/build.prop && return 1

echo "- Android Version = $(getp ro.build.version.release $editor2/$system/build.prop) "
echo "- Name ROM        = $(getp ro.build.display.id $editor2/$system/build.prop) "
[ -f $editor2/vendor/build.prop ] && echo "- Device          = $(getp ro.product.vendor.device $editor2/vendor/build.prop) "
echo "- System as-root  = $systemroot "
print " "
}


clog(){
	if [ -f $editor2/system/system/build.prop ]; then
	system=system/system
	systemroot=true
	else
	system=system
	systemroot=false
	fi;
	#create log
	sedlog "compress log"
	cdir $jancox/bin/log
	for LOG1 in $jancox/bin/jancox.log $jancox/bin/jancox.live.log; do
	   [ -f $LOG1 ] && cp -pf $LOG1 $jancox/bin/log/ || sedlog "Failed cp $LOG1"
	done
	if [ -f $editor/$system/build.prop ]; then
	    cp -pf $editor/$system/build.prop $jancox/bin/log/sys_rom_build.prop || sedlog "Failed cp $editor/$system/build.prop"
	fi
	if [ -f $editor/vendor/build.prop ]; then
		cp -pf $editor/vendor/build.prop $jancox/bin/log/ven_rom_build.prop || sedlog "Failed cp /$editor/vendor/build.prop"
	fi
	if [ -f /system/build.prop ]; then
		cp -pf /system/build.prop $jancox/bin/log/sys_device_build.prop || sedlog "Failed cp /system/build.prop"
	fi
	if [ -f /vendor/build.prop ]; then
		cp -pf /vendor/build.prop $jancox/bin/log/ven_device_build.prop || sedlog "Failed cp /vendor/build.prop"
	fi
	[ -f $jancox/bin/jancox_log.tar.gz ] && del $jancox/bin/jancox_log.tar.gz
	cd  $jancox/bin/log
	$bin/busybox tar -cz -f $jancox/bin/jancox_log.tar.gz * || sedlog "Failed Creating jancox_log.tar.gz"
	del $jancox/bin/log
	cd $jancox
	}
	
	
#dec
if [ $(uname -m) = *x86* ]; then
ARCH32=x86
else
ARCH32=arm
fi

#func active
bash_color
