####################################
#         Kopi Functions           #
####################################
#          By : wahyu6070          #
####################################
print(){
	echo "$1"
	}
	
printlog(){
	print "$1"
	if [ "$1" != " " ]; then
	print "$1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $LOG
	else
	print "$1" >> $LOG
	fi
	}
sedlog(){
	print "[Processing]  $1 [$(date '+%d/%m/%Y %H:%M:%S')]" >> $LOG
	}
	

getp(){ grep "^$1" "$2" | head -n1 | cut -d = -f 2; }

loadings() {
  PID=$!
  a=0;
  while [ -d /proc/$PID ]; do
    b=$((+1))
    a=$((a+1))
    sleep 0.9s
    printf "\r${@} [${a}Second]"
  done
}

loadingm() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((h+1))
    sleep 59.9s
    printf "\r${@} [${b}Minutes]"
  done
}

loadingz() {
  PID=$!
  a=0
  while [ -d /proc/$PID ]; do
    b=$((a+1))
    a=$((a+1))
    sleep 0.9s
    printf "#"
  done
}

printmid() {
  local CHAR=$(printf "$@" | sed 's|\\e[[0-9;]*m||g' | wc -m)
  local hfCOLUMN=$((COLUMNS/2))
  local hfCHAR=$((CHAR/2))
  local indent=$((hfCOLUMN-hfCHAR))
  echo "$(printf '%*s' "${indent}" '') $@"
}



setime(){
	if [[ $1 == '-f' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -f "$2" ]; then
	      touch -ct $3 "$2" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	   else
	      echo "setime: $2: Is not file"
	   fi
	elif [[ $1 == '-r' ]] && [ "$2" ] && [ $3 -eq $3 ]; then
	   if [ -d "$2" ]; then
	      find "$2" -print | while read filename; do
	      touch -ct $3 "$filename" 2>/dev/null || echo "setime: bad '$3': Value too large for defined data type"
	      done
	   else
	      echo "setime: $2: Is not directory"
	   fi
	elif [[ $1 == '--version' ]] || [[ $1 == '-v' ]]; then
	echo "setime v1.0 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    elif [[ $1 == '--help' ]] || [[ $1 == '-h' ]]; then
    echo "usage : setime <options> <input> <datetime>"
    echo " "
    echo "example : setime -r /sdcard/download 202004081503"
    echo " "
    echo "options"
    echo "-f                    file"
    echo "-r                    change all directory and file"
    echo "-v, --version         version"
    echo "-h, --help            help"
    echo " "
    echo "setime v1.0 since 2020-04-09 Copyright (C) 2020 wahyu kurniawan (wahyu6070)."
    else
    echo "usage : setime --help"
    fi
}


bash_color(){
G='\e[01;32m'		# GREEN TEXT
R='\e[01;31m'		# RED TEXT
Y='\e[01;33m'		# YELLOW TEXT
B='\e[01;34m'		# BLUE TEXT
V='\e[01;35m'		# VIOLET TEXT
Bl='\e[01;30m'		# BLACK TEXT
C='\e[01;36m'		# CYAN TEXT
W='\e[01;37m'		# WHITE TEXT
BGBL='\e[1;30;47m'	# Background W Text Bl
N='\e[0m'			# How to use (example): echo "${G}example${N}"
}

abort(){
	print " " | tee -a $LOG
	print "!!! $1" | tee -a $LOG
	print " " | tee -a $LOG
	exit 1
	}
	
#
del (){ rm -rf "$@"; }
cdir (){ mkdir -p "$@"; }


#jancox
rom-info (){
	editor2=$1
if [ -f $editor2/system/system/build.prop ]; then
system=system/system
systemroot=true
else
system=system
systemroot=false
fi;

test ! -f $editor2/$system/build.prop && return 1

if [ -d $editor2/vendor ]; then
	for GREP_VERITY in forceencrypt forcefdeorfbe fileencryption .dmverity=true fileencryption; do
		[[ "$(grep $GREP_VERITY $editor2/vendor/etc/fstab.qcom)" ]] && DMVERITY=true || DMVERITY=false
	done
	[[ "$(grep secure=0 $editor2/vendor/default.prop)" ]] && DMVERITY=true;
	#[ -f $editor2/$system/recovery-from-boot.p ] && DMVERITY=true;
else
DMVERITY=false
fi
echo "- Android Version = $(getp ro.build.version.release $editor2/$system/build.prop) "
echo "- Name ROM        = $(getp ro.build.display.id $editor2/$system/build.prop) "
[ -f $editor2/vendor/build.prop ] && echo "- Device          = $(getp ro.product.vendor.device $editor2/vendor/build.prop) "
echo "- System as-root  = $systemroot "
echo "- Dm-verity       = $DMVERITY "
print " "
}

	
#dec
case $(uname -m) in
aarch32 | armv7l) ARCH=arm
;;
aarch64 | armv8l) ARCH=arm64
;;
i386 | i486 |i586 | i686) ARCH=x86
;;
*x86_64*) ARCH=x86_64
;;
*) ERROR "Architecure not support <$(uname -m)>"
;;
esac

ARCH=arm
#func active
bash_color


#variable

JANCOX=$JANCOX
TMP=$JANCOX/bin/tmp
TMP2=$JANCOX/bin/tmp2
EDITOR=$JANCOX/editor
LOG=$JANCOX/bin/jancox.log
BIN=$JANCOX/bin/$ARCH
BUSYBOX=$BIN/busybox
PROFILE=$JANCOX/bin/jancox.prop
chmod -R 755 $BIN


if [ -f /data/data/com.termux/files/usr/bin/python ]; then
	PYTHON=/data/data/com.termux/files/usr/bin/python
else
	printlog " "
	printlog "- python 3 Not Installed In Termux !"
	printlog " "
	printlog "- apt update"
	printlog "- apt upgrade"
	printlog "- pkg install python"
	printlog " "
	exit 1
fi

